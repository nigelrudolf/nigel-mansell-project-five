{"version":3,"sources":["Components/firebase.js","Components/MediaSort.js","Components/CloseButton.js","Components/PostButton.js","Components/PostForm.js","Components/Chevron.js","Components/PostOptions.js","Components/UpdateButton.js","Components/PostCard.js","Components/AddPostButton.js","Components/MenuBar.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","icons","faHome","faTwitter","faFacebook","faInstagram","faTiktok","MediaSort","listIcons","map","icon","i","key","size","className","element","faTimes","CloseButton","closePostForm","onClick","PostButton","handleClick","userInput","clearInput","event","PostForm","useState","title","date","content","setUserInput","handleChange","value","target","Date","toDateString","name","onChange","type","placeholder","faChevronDown","Chevron","togglePostOptions","trash","faTrashAlt","edit","faEdit","PostOptions","editPost","deletePost","UpdateButton","PostCard","props","post","setPost","postOptionsIsVisible","setPostOptionsIsVisible","editPostIsVisible","setEditPostIsVisible","setPanelId","postId","updateMainPanel","mainPanelId","handleUpdateChange","defaultValue","inputField","textArea","postButton","panelId","faPen","AddPostButton","displayPostForm","MenuBar","App","posts","setPosts","postFormIsVisible","setPostFormIsVisible","useEffect","database","ref","on","response","newState","data","val","push","id","child","remove","console","log","document","querySelector","removeAttribute","preventDefault","setAttribute","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ac00282.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCW9UhpevFkU0UtsuAfGOs1krgLdqAjVYM\",\n    authDomain: \"social-media-planner-2fe20.firebaseapp.com\",\n    databaseURL: \"https://social-media-planner-2fe20.firebaseio.com\",\n    projectId: \"social-media-planner-2fe20\",\n    storageBucket: \"social-media-planner-2fe20.appspot.com\",\n    messagingSenderId: \"995865750758\",\n    appId: \"1:995865750758:web:333fa1a679a8dc0e63df27\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '@fortawesome/fontawesome-svg-core/styles.css';\n \nimport { faHome } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter, faFacebook, faInstagram, faTiktok } from '@fortawesome/free-brands-svg-icons';\n\nlet icons = [ faHome, faTwitter, faFacebook, faInstagram, faTiktok];\n\nfunction MediaSort() {\n    let listIcons = icons.map((icon, i) => \n    <li key={i} ><button><FontAwesomeIcon icon={icon} size=\"2x\"/></button></li>\n);\n    return (\n        <ul className=\"media-sort\" >\n           {listIcons}\n        </ul>\n    )\n}\n\nexport default MediaSort;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst element = <FontAwesomeIcon icon={faTimes} size=\"2x\"/>\n\nfunction CloseButton ({ closePostForm }) {\n    return <button className=\"CloseButton\" onClick={closePostForm}>{element}</button>;\n}\n\nexport default CloseButton;","import React from 'react';\n\n\nfunction PostButton({handleClick, userInput, clearInput}) {\n    return <button className=\"PostButton\" onClick={(event) => {handleClick(event, userInput); clearInput();}}>Post</button>\n}\n\nexport default PostButton;","import React, { useState } from 'react';\nimport CloseButton from './CloseButton';\nimport PostButton from './PostButton';\n\nfunction PostForm({closePostForm, handleClick}) {\n\n    const [userInput, setUserInput] = useState({\n        title: '',\n        date: '',\n        content: '',\n    });\n\n    const handleChange = (event) => {\n        const value = event.target.value;\n        const date = new Date().toDateString();\n        setUserInput({\n            ...userInput,\n            [event.target.name]: value,\n            date: date,\n        });        \n    }\n\n\n    const clearInput = () => {\n        setUserInput({\n            ...userInput,\n            title: '',\n            content: '',\n        });\n    }\n\n    return (\n        <div className=\"modal-wrapper\">\n            <div className=\"Modal\">\n                <div className=\"ModalHeader\">\n                    <CloseButton \n                        closePostForm={closePostForm}\n                        />\n                </div>\n                <form className=\"PostForm\">\n                   \n           \n                    <input\n                        value={userInput.title}\n                        onChange={handleChange}\n                        name=\"title\"\n                        type=\"text\"\n                        \n\n                        placeholder=\"Title\"\n                        className=\"title-input\"\n                    />\n                    <textarea\n                        value={userInput.content}\n                        onChange={handleChange}\n                        name=\"content\"\n                        type=\"text\"\n\n                        placeholder=\"What's your idea\"\n                    />\n                </form>\n                <div className=\"ModalFooter\">\n                    <PostButton\n                        handleClick={handleClick}\n                        userInput={userInput}\n\n                        clearInput={clearInput}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PostForm;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons';\n\nconst element = <FontAwesomeIcon icon={faChevronDown} size=\"1x\"/>;\n\nfunction Chevron({ togglePostOptions }) {\n    return <button className=\"ChevButton\" onClick={togglePostOptions}>{element}</button>;\n}\n\nexport default Chevron;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faEdit} from '@fortawesome/free-solid-svg-icons';\n\nconst trash = <FontAwesomeIcon icon={faTrashAlt} size=\"1x\"/>\nconst edit = <FontAwesomeIcon icon={faEdit} size=\"1x\"/>\n\nfunction PostOptions({ editPost, deletePost }) {\n    return (\n        <div className=\"PostOptionsModal\">\n            <ul>\n                <li><button onClick={() => editPost()}>{edit} Edit</button></li>\n                <li><button onClick={() => deletePost()}>{trash} Delete</button></li>\n            </ul>\n        </div>\n        )\n}\n\nexport default PostOptions;","import React from 'react';\n\nfunction UpdateButton({ handleClick, userInput, clearInput }) {\n    return (\n        <button className=\"UpdateButton\" onClick={(event) => {handleClick(event, userInput); clearInput();}}>Update</button>\n        )\n}\n\nexport default UpdateButton;","import React, { useState } from 'react';\nimport Chevron from './Chevron';\nimport PostOptions from './PostOptions';\nimport UpdateButton from './UpdateButton';\n\nfunction PostCard(props) {\n  const [post, setPost] = useState({\n    title: '',\n    content: '',\n  });\n\n  const [postOptionsIsVisible, setPostOptionsIsVisible] = useState(false);\n\n  const [editPostIsVisible, setEditPostIsVisible] = useState(false);\n\n  const [panelId, setPanelId] = useState('');\n\n   \n  const {title, date, content, deletePost, postId, mainPanelId, updateMainPanel} = props;\n\n  const handleUpdateChange = (event) => {\n    const value = event.target.defaultValue;\n    setPost({\n      [event.target.name]: value,\n    });\n  }\n\n  const displayPostOptions = () => {\n    setPostOptionsIsVisible(true);\n    setEditPostIsVisible(false);\n  }\n\n  const editPost = () => {\n    setEditPostIsVisible(true);\n    setPostOptionsIsVisible(false);\n  }\n\n  const togglePostOptions = (panelId) => {\n    setPostOptionsIsVisible(true);\n    setEditPostIsVisible(false);\n    setPanelId(panelId);\n    updateMainPanel(panelId);\n  }\n\n  const inputField = <input \n    value={post.title}\n    onChange={handleUpdateChange}\n    name=\"title\"\n    type=\"text\"\n\n    className=\"title-input\" \n  />;\n\n  const textArea = <textarea \n      value={post.content}\n      onChange={handleUpdateChange}\n      name=\"content\"\n  />;\n\n\n  const postButton = <div className=\"ModalFooter\"><UpdateButton handleUpdateChange={handleUpdateChange} /></div>\n\n  return (\n    <div className=\"PostCard\">\n      <div>\n        <h2 className=\"post-card-heading\">{ editPostIsVisible ? inputField : title }</h2>\n        <p className=\"post-card-date\">{date}</p>\n        <p className=\"post-card-content\">{editPostIsVisible ? textArea : content}</p>\n        {editPostIsVisible ? postButton : null}\n      </div>\n      \n      <Chevron \n        // displayPostOptions={this.displayPostOptions}\n        togglePostOptions={() => togglePostOptions(postId, mainPanelId)}\n      /> \n      { \n      postOptionsIsVisible ? <PostOptions \n        deletePost={deletePost}\n        editPost={editPost}\n      /> : null}\n    </div>\n  );\n\n}\n\nexport default PostCard;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen } from '@fortawesome/free-solid-svg-icons';\n\nconst element = <FontAwesomeIcon icon={faPen} size=\"2x\"/>;\n\nfunction AddPostButton({ displayPostForm }) {\n        return <button className=\"AddPostButton\" onClick={displayPostForm}>{element}</button>;\n}\n\nexport default AddPostButton;","import React from 'react';\nimport AddPostButton from './AddPostButton';\n\nfunction MenuBar({displayPostForm}) {\n    return (\n        <nav className=\"MenuBar\">\n            <AddPostButton \n                displayPostForm={displayPostForm}\n                />\n        </nav>\n    )\n}\n\nexport default MenuBar;","import React, { useState, useEffect } from 'react';\nimport firebase from './Components/firebase';\nimport MediaSort from './Components/MediaSort';\nimport PostForm from './Components/PostForm';\nimport PostCard from './Components/PostCard';\nimport MenuBar from './Components/MenuBar';\nimport './App.css';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [postFormIsVisible, setPostFormIsVisible] = useState(false);\n  const [editPostIsVisible, setEditPostIsVisible] = useState(false);\n  const [panelId, setPanelId] = useState('');\n\n  const displayPostForm = () => {\n    setPostFormIsVisible(true);\n    document.querySelector('body').setAttribute('style', 'overflow: hidden');\n  }\n\n  const closePostForm = () => {\n    setPostFormIsVisible(false);\n    document.querySelector('body').removeAttribute('style');\n  }\n\n  const editPost = (postId) => {\n    console.log(`editing ${postId}`);\n\n    setEditPostIsVisible(true);\n  }\n\n  const deletePost = (postId) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(postId).remove();\n  }  \n\n  const handleClick = (event, userInput) => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n    dbRef.push(userInput);\n\n    setPostFormIsVisible(false);\n  }\n\n  const handleUpdateClick = (event, userInput) => {\n    event.preventDefault();\n    const dbref = firebase.database().ref();\n    dbref.update(userInput);\n    // firebase.database().ref('/-LYYnjbTOR0Qq03ehjb1').update(settingToChange);\n  }\n\n  const updateMainPanel = (panelId) => {\n    setPanelId(panelId);\n  }\n\n  useEffect(() => {\n      const dbRef = firebase.database().ref();\n\n      dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n\n        for (let key in data) {\n          newState.push({\n            post: data[key],\n            id: key\n          })\n        }\n        setPosts(newState);\n      });  \n  }, []);\n\n  return (\n    <div className=\"App App-wrapper\">\n\n      <h1 className=\"logo\">Social Media Planner</h1>\n      <main>\n      <MediaSort />\n      {posts.map((post) => {\n          return (\n            <PostCard\n            key={post.id}\n            title={post.post.title}\n            date={post.post.date}\n            content={post.post.content}\n            deletePost={() => deletePost(post.id)}\n            editPost={() => editPost(post.id)}\n            postId={post.id}\n            mainPanelId={panelId}\n            updateMainPanel={updateMainPanel}\n            />\n          )\n        })}\n      { postFormIsVisible ? <PostForm\n        closePostForm={closePostForm}\n        handleClick={handleClick}\n      /> : null }\n      </main>\n    \n      <MenuBar \n        displayPostForm={displayPostForm}\n      />\n    </div>\n  );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}