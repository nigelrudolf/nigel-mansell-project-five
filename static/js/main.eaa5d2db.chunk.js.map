{"version":3,"sources":["Components/firebase.js","Components/MediaSort.js","Components/CloseButton.js","Components/PostButton.js","Hooks/useOutsideAlerter.js","Components/PostForm.js","Components/Chevron.js","Components/PostOptions.js","Components/PostCard.js","Components/AddPostButton.js","Components/MenuBar.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","icons","faHome","faTwitter","faFacebook","faInstagram","faTiktok","MediaSort","listIcons","map","icon","i","key","size","className","element","faTimes","CloseButton","closePostForm","onClick","PostButton","type","useOutsideAlerter","ref","callback","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","PostForm","handleClick","useState","title","date","content","userInput","setUserInput","wrapperRef","useRef","handleChange","value","Date","toDateString","name","onSubmit","onChange","required","placeholder","faChevronDown","Chevron","togglePostOptions","trash","faTrashAlt","edit","faEdit","PostOptions","editPost","deletePost","postOptionsIsVisible","setPostOptionsIsVisible","useTransition","from","opacity","transform","enter","leave","config","item","state","easing","props","div","style","PostCard","editPostIsVisible","setEditPostIsVisible","panelId","setPanelId","postId","currentPostOptionPanel","setCurrentPostOptionPanel","handleUpdateClick","handleUpdateChange","cancelEditPost","currentPanel","e","handleUpdateSubmit","faPen","AddPostButton","displayPostForm","MenuBar","App","posts","setPosts","postFormIsVisible","setPostFormIsVisible","querySelector","removeAttribute","preventDefault","database","update","on","response","newState","data","val","push","post","id","child","remove","console","log","setAttribute","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eaa5d2db.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCW9UhpevFkU0UtsuAfGOs1krgLdqAjVYM\",\n    authDomain: \"social-media-planner-2fe20.firebaseapp.com\",\n    databaseURL: \"https://social-media-planner-2fe20.firebaseio.com\",\n    projectId: \"social-media-planner-2fe20\",\n    storageBucket: \"social-media-planner-2fe20.appspot.com\",\n    messagingSenderId: \"995865750758\",\n    appId: \"1:995865750758:web:333fa1a679a8dc0e63df27\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '@fortawesome/fontawesome-svg-core/styles.css';\n \nimport { faHome } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter, faFacebook, faInstagram, faTiktok } from '@fortawesome/free-brands-svg-icons';\n\nlet icons = [ faHome, faTwitter, faFacebook, faInstagram, faTiktok];\n\nfunction MediaSort() {\n    let listIcons = icons.map((icon, i) => \n    <li key={i} ><button><FontAwesomeIcon icon={icon} size=\"2x\"/></button></li>\n);\n    return (\n        <ul className=\"media-sort\" >\n           {listIcons}\n        </ul>\n    )\n}\n\nexport default MediaSort;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst element = <FontAwesomeIcon icon={faTimes} size=\"2x\"/>\n\nfunction CloseButton ({ closePostForm }) {\n    return <button className=\"CloseButton\" onClick={closePostForm}>{element}</button>;\n}\n\nexport default CloseButton;","import React from 'react';\n\nfunction PostButton() {\n    return <button className=\"PostButton\" type=\"submit\">Post</button>\n}\n\nexport default PostButton;","// References\n// https://stackoverflow.com/questions/32553158/detect-click-outside-react-component\n// https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-with-react-hook-ba77c37c7e82\n// https://www.youtube.com/watch?v=eWO1b6EoCnQ\nimport { useEffect } from 'react';\n\nfunction useOutsideAlerter(ref, callback) {\n\n    useEffect(() => {\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                callback();\n            }\n        }\n\n        document.addEventListener('mousedown', handleClickOutside);\n\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [callback, ref]);\n}\n\nexport default useOutsideAlerter;","import React, { useState, useRef } from 'react';\nimport CloseButton from './CloseButton';\nimport PostButton from './PostButton';\nimport useOutsideAlerter from '../Hooks/useOutsideAlerter';\n\nfunction PostForm({closePostForm, handleClick}) {\n\n    const [userInput, setUserInput] = useState({\n        title: '',\n        date: '',\n        content: '',\n    });\n\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, () => closePostForm());\n\n    const handleChange = (event) => {\n        const value = event.target.value;\n        const date = new Date().toDateString();\n        setUserInput({\n            ...userInput,\n            [event.target.name]: value,\n            date: date,\n        });        \n    }\n\n\n    const clearInput = () => {\n        setUserInput({\n            ...userInput,\n            title: '',\n            content: '',\n        });\n    }\n\n    return (\n        <div className=\"modal-wrapper\">\n            <div ref={wrapperRef} className=\"Modal\">\n                <div className=\"ModalHeader\">\n                    <CloseButton \n                        closePostForm={closePostForm}\n                        />\n                </div>\n                <form className=\"PostForm\" onSubmit={(event) => {handleClick(event, userInput); clearInput();}}>\n                    <input\n                        value={userInput.title}\n                        onChange={handleChange}\n                        name=\"title\"\n                        type=\"text\"\n                        required\n                        placeholder=\"Title\"\n                        className=\"title-input\"\n                    />\n                    <textarea\n                        value={userInput.content}\n                        onChange={handleChange}\n                        name=\"content\"\n                        type=\"text\"\n                        required\n                        placeholder=\"What's your idea\"\n                    />\n                    <div className=\"ModalFooter\">\n                    <PostButton/>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default PostForm;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons';\n\nconst element = <FontAwesomeIcon icon={faChevronDown} size=\"1x\"/>;\n\nfunction Chevron({ togglePostOptions }) {\n    return <button className=\"ChevButton\" onClick={togglePostOptions}>{element}</button>;\n}\n\nexport default Chevron;","import React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faEdit} from '@fortawesome/free-solid-svg-icons';\nimport useOutsideAlerter from '../Hooks/useOutsideAlerter';\nimport {useTransition, animated} from 'react-spring'\n\n\n\nconst trash = <FontAwesomeIcon icon={faTrashAlt} size=\"1x\"/>\nconst edit = <FontAwesomeIcon icon={faEdit} size=\"1x\"/>\n\n\nfunction PostOptions({editPost, deletePost, postOptionsIsVisible, setPostOptionsIsVisible}) {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, () => setPostOptionsIsVisible(false));\n\n    let transitions = useTransition(postOptionsIsVisible, null, {\n        from: { opacity: 0, transform: 'scale(0.95)' },\n        enter: { opacity: 1, transform: 'scale(1)' },\n        leave: { opacity: 0, transform: 'scale:(0.95)' },\n        config: (item, state) => ({\n            easing: state === 'leave' ? 75 : 100,\n        }),\n    });\n\n\n    return (\n        transitions.map(({item, key, props}) =>\n            item && \n            <animated.div key={key} style={props} ref={wrapperRef} className=\"PostOptionsModal\">\n                <ul>\n                    <li><button onClick={() => editPost()}><span className=\"post-options-icon\">{edit}</span><span className=\"post-options-name\">Edit</span></button></li>\n                    <li><button onClick={() => deletePost()}><span className=\"post-options-icon\">{trash}</span><span className=\"post-options-name\">Delete</span></button></li>\n                </ul>\n            </animated.div>\n        )\n    )\n}\n\nexport default PostOptions;","import React, { useState, useEffect } from 'react';\nimport Chevron from './Chevron';\nimport PostOptions from './PostOptions';\n\n\nfunction PostCard(props) {\n  const [postOptionsIsVisible, setPostOptionsIsVisible] = useState(false);\n\n  const [editPostIsVisible, setEditPostIsVisible] = useState(false);\n\n  const [panelId, setPanelId] = useState({panelId: ''});\n   \n  const {title, date, content, deletePost, postId, currentPostOptionPanel, setCurrentPostOptionPanel, handleUpdateClick} = props;\n\n  const [userInput, setUserInput] = useState({\n    title: title,\n    content: content,\n  });\n\n  const handleUpdateChange = (event) => {\n    const value = event.target.value;\n        setUserInput({\n            ...userInput,\n            [event.target.name]: value,\n        });        \n  }\n\n  const handleUpdateSubmit = (e, userInput, postId) => {\n    handleUpdateClick(e, userInput, postId);\n    setEditPostIsVisible(false);\n  }\n\n  const editPost = () => {\n    setEditPostIsVisible(true);\n    setPostOptionsIsVisible(false);\n  }\n\n  const togglePostOptions = (postId) => {\n    let panelId = postId;\n    setPostOptionsIsVisible(true);\n    setEditPostIsVisible(false);\n    setPanelId({panelId: panelId})\n    setCurrentPostOptionPanel({currentPanel: panelId})\n  }\n\n  const cancelEditPost = () => {\n    setEditPostIsVisible(false);\n  }\n\n  const displayPost = () => {\n    return (\n      <>\n      <div className=\"display-post\">\n        <h2 className=\"post-card-heading\">{title}</h2>\n        <p className=\"post-card-date\">{date}</p>\n        <p className=\"post-card-content\">{content}</p>\n      </div>\n      <Chevron togglePostOptions={() => togglePostOptions(postId)}/> \n      </>\n    )\n  }\n\n  const displayEditPost = () => {\n  return (\n    <form className=\"display-edit-post\" onSubmit={(e) => handleUpdateSubmit(e, userInput, postId)}>\n      <input \n        value={userInput.title}\n        onChange={handleUpdateChange}\n        name=\"title\"\n        type=\"text\"\n        className=\"edit-title-input\"\n      />\n      <textarea\n        value={userInput.content}\n        onChange={handleUpdateChange}\n        name=\"content\"\n        className=\"edit-textarea\"\n      />\n      <div className=\"display-edit-post-footer\">\n        <button className=\"cancel-update-button\" onClick={cancelEditPost}>Cancel</button> \n        <button className=\"update-button\" type=\"submit\">Update</button>\n      </div>\n    </form>\n    )\n  }  \n\n  useEffect(() => {\n    if (panelId.panelId !== currentPostOptionPanel.currentPanel) {\n      setPostOptionsIsVisible(false);\n    }\n  }, [currentPostOptionPanel.currentPanel, panelId.panelId])\n  \n  return (\n    <div className=\"PostCard\">\n      {editPostIsVisible ? displayEditPost() : displayPost() }\n      { postOptionsIsVisible ? <PostOptions\n        postOptionsIsVisible={postOptionsIsVisible}\n        setPostOptionsIsVisible={setPostOptionsIsVisible}\n        deletePost={deletePost}\n        editPost={editPost}\n      /> : null}\n    </div>\n  );\n}\n\nexport default PostCard;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen } from '@fortawesome/free-solid-svg-icons';\n\nconst element = <FontAwesomeIcon icon={faPen} size=\"2x\"/>;\n\nfunction AddPostButton({ displayPostForm }) {\n        return <button className=\"AddPostButton\" onClick={displayPostForm}>{element}</button>;\n}\n\nexport default AddPostButton;","import React from 'react';\nimport AddPostButton from './AddPostButton';\n\nfunction MenuBar({displayPostForm}) {\n    return (\n        <nav className=\"MenuBar\">\n            <AddPostButton \n                displayPostForm={displayPostForm}\n                />\n        </nav>\n    )\n}\n\nexport default MenuBar;","import React, { useState, useEffect } from 'react';\nimport firebase from './Components/firebase';\nimport MediaSort from './Components/MediaSort';\nimport PostForm from './Components/PostForm';\nimport PostCard from './Components/PostCard';\nimport MenuBar from './Components/MenuBar';\nimport './App.css';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [postFormIsVisible, setPostFormIsVisible] = useState(false);\n  const [editPostIsVisible, setEditPostIsVisible] = useState(false);\n  const [currentPostOptionPanel, setCurrentPostOptionPanel] = useState({\n    currentPanel: '',\n  });\n\n  const displayPostForm = () => {\n    setPostFormIsVisible(true);\n    document.querySelector('body').setAttribute('style', 'overflow: hidden');\n  }\n\n  const closePostForm = () => {\n    setPostFormIsVisible(false);\n    document.querySelector('body').removeAttribute('style');\n  }\n\n  const editPost = (postId) => {\n    console.log(`editing ${postId}`);\n    setEditPostIsVisible(true);\n  }\n\n  const deletePost = (postId) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(postId).remove();\n  }  \n\n  const handleClick = (event, userInput) => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n    dbRef.push(userInput);\n    closePostForm();\n  }\n\n  const handleUpdateClick = (event, userInput, postId) => {\n    event.preventDefault();\n    firebase.database().ref(postId).update(userInput);\n  }\n\n  useEffect(() => {\n      const dbRef = firebase.database().ref();\n\n      dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n\n        for (let key in data) {\n          newState.push({\n            post: data[key],\n            id: key\n          })\n        }\n        setPosts(newState);\n      });  \n  }, []);\n\n  return (\n    <div className=\"App App-wrapper\">\n      <h1 className=\"logo\">Social Media Planner</h1>\n      <main>\n      <MediaSort />\n      {posts.map((post) => {\n          return (\n            <PostCard\n            key={post.id}\n            title={post.post.title}\n            date={post.post.date}\n            content={post.post.content}\n            deletePost={() => deletePost(post.id)}\n            editPost={() => editPost(post.id)}\n            postId={post.id}\n            currentPostOptionPanel={currentPostOptionPanel}\n            setCurrentPostOptionPanel={setCurrentPostOptionPanel}\n            handleUpdateClick={handleUpdateClick}\n            />\n          )\n        })}\n      { postFormIsVisible ? <PostForm\n        closePostForm={closePostForm}\n        handleClick={handleClick}\n      /> : null }\n      </main>\n      <MenuBar \n        displayPostForm={displayPostForm}\n      />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}